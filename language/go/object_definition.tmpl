{{define "Model/ObjectDefinition" -}}
{{/*type {{.Name | nativetype}} interface{ */}}
{{range $fields := .Fields -}}
{{range $desc := . | desc -}}
// {{.}}
{{end -}}
{{- if .Arguments -}}
// {{.Name.Value}}(
{{- range $i, $args := .Arguments -}}
{{if $i}},{{end}} {{ . | body -}}
{{- end }} )
{{ end -}}
{{- if $.Name.Value | root -}}
func (root Root) {{.Name.Value | public}}{{$.Name.Value}}(
ctx context.Context,
{{ else -}}
func ({{$.Name.Value | private}} {{$.Name.Value}}) {{.Name.Value | public}}Field(
{{ end -}}
    {{- if .Type | connection -}}
    args relay.ConnectionArguments,
    {{ else -}}
        {{- range $i, $args := .Arguments -}}
            {{.Name.Value}} {{nativetypepkg .Type output.schema}},
        {{ end -}}
    {{- end -}}
    ) (
    {{- if .Type | connection -}}
    *relay.Connection
    {{- else -}}
    {{nativetypepkg .Type (print "*" output.schema)}}
    {{- end -}}, error) {
        return nil, nil
    }
{{end}}

{{end}}

{{define "Native/ObjectDefinition" -}}
{{range $i, $desc := . | desc -}}
{{- if $i | not}}// {{$.Name | nativetype }} {{.}}
{{else}}
// {{.}}
{{end -}}
{{end -}}
type {{.Name | nativetype}} interface{
    {{range $fields := .Fields -}}
    {{range $desc := . | desc -}}
    // {{.}}
    {{end -}}
    {{- if .Arguments -}}
    // {{.Name.Value}}(
    {{- range $i, $args := .Arguments -}}
    {{if $i}},{{end}} {{ . | body -}}
    {{- end }} )
    {{ end -}}
    {{- if $.Name.Value | root -}}
    {{.Name.Value | public}}{{$.Name.Value}}(context.Context
    {{- if .Arguments | len -}},{{end}}
    {{- else -}}
    {{.Name.Value | public}}Field(
    {{- end -}}
        {{- if .Type | connection -}}
        {{- if $.Name.Value | root -}}
        , 
        {{- end -}}
        relay.ConnectionArguments
        {{- else -}}
        {{- range $i, $args := .Arguments -}}
        {{if $i}}, {{end}}{{- .Type | nativetype -}}
        {{- end -}}
        {{- end -}}
    ) ({{nativetypepkg .Type "*"}}, error)

    {{end}}
}

{{end}}

{{define "Graphql/ObjectDefinition" -}}
var {{ .Name | graphqltype }} = {{cfg.pkg}}.NewObject({{cfg.pkg}}.ObjectConfig{
    Name: "{{.Name.Value}}",
    Fields: graphql.Fields{},
    {{with $desc := . | desc -}}
    Description: {{template "Description" $desc}}
    {{end -}}
    {{ if (len .Interfaces) }}
    Interfaces: (graphql.InterfacesThunk)(func() []*graphql.Interface {
        return []*graphql.Interface{
        {{ range $iface := .Interfaces }}
            {{ if eq ($iface | body) "Node" }}
            nodeDefinitions.NodeInterface,
            {{ else }}
            {{$iface | graphqltype}},
            {{ end }}
        {{ end }}
        }
    }),
    {{ end }}
})

{{end}}

{{define "Fields/ObjectDefinition" -}}
{{ $definition := .Name | graphqltype }}
lib.AddFieldConfigMap({{.Name | graphqltype}}, graphql.Fields{
    {{ if and (.Name.Value | root) (eq .Name.Value "Query") (len nodes.Relay)}}
    "node": nodeDefinitions.NodeField,
    {{ end }}
    {{ if .Name.Value | relaypayload }}
    "clientMutationId": &graphql.Field{
        Type: graphql.String,

        Resolve: func(params graphql.ResolveParams) (interface{}, error) {
            source := params.Source.(lib.MutationPayload)
            id := source.ClientMutationID
            return id, nil
        },
    },
    {{ end }}
    {{with $fd := .Fields -}}
    {{ range $fd }}
    "{{ .Name.Value }}":
        {{- if and (relay $.Interfaces) (eq .Name.Value "id") }}
        relay.GlobalIDField("{{$.Name.Value}}", lib.IDFetchFunction),
        {{- else }}
        &{{cfg.pkg}}.Field{
            Type: {{.Type | graphqltype}},
            {{if not (.Type | connection) }}
            {{with $desc := . | desc -}}
            Description: {{template "Description" $desc}}
            {{end -}}
            {{with $args := .Arguments -}}
            Args: {{cfg.pkg}}.FieldConfigArgument{
                {{ range $args -}}
                "{{.Name.Value}}": &{{cfg.pkg}}.ArgumentConfig{
                    Type: {{.Type | graphqltype}},
                    {{with $desc := . | desc -}}
                    Description: {{template "Description" $desc}}
                    {{end -}}
                },
                {{end}}
            },
            {{end -}}
            Resolve: func(params {{cfg.pkg}}.ResolveParams) (interface{}, error) {
                {{ $returnspayload := (.Type | namedtype) | relaypayload }}
                {{ $ispayload := $.Name.Value | relaypayload }}
                {{ range $args := .Arguments -}}
                    var {{.Name.Value}}Arg {{.Type | nativetype}}
                    mapstructure.Decode(params.Args["{{.Name.Value}}"], &{{.Name.Value}}Arg)
                    {{end}}
                    {{if $.Name.Value | root}}
                        {{ if eq $returnspayload true }}
                            payload, err := provider.{{$.Name.Value | private}}.{{.Name.Value | public}}{{$.Name.Value}}(
                        {{- else -}}
                            return provider.{{$.Name.Value | private}}.{{.Name.Value | public}}{{$.Name.Value}}(
                        {{- end -}}
                        params.Context{{if .Arguments | len}}, {{ end }} 
                    {{- else -}}
                        {{ if eq $ispayload true }}
                        source := params.Source.(lib.MutationPayload)
                        {{$.Name.Value}}Source, ok := source.Payload.({{$.Name | nativetype}})
                        if ok == false {
                            return nil, nil
                        }
                        {{ else }}
                        {{$.Name.Value}}Source, _ := params.Source.({{$.Name | nativetype}})
                        {{ end }}
                        return {{$.Name.Value}}Source.{{.Name.Value | public}}Field(
                    {{- end}}
                    {{- range $i, $args := .Arguments -}}
                        {{if $i}}, {{end}}{{.Name.Value}}Arg
                    {{- end -}})
                    {{ if eq $returnspayload true }}
                        if err != nil {
                            return nil, err
                        }

                        var id lib.ClientMutationID
                        mapstructure.Decode(params.Args["input"], &id)

                        return lib.MutationPayload{
                            Payload:          payload,
                            ClientMutationID: id.ClientMutationId,
                        }, nil
                    {{ end }}

            },
            {{ else }}{{/* else not connection */}} 
            Args: relay.ConnectionArgs,
            Resolve: func(params {{cfg.pkg}}.ResolveParams) (interface{}, error) {
                args := relay.NewConnectionArguments(params.Args)
                {{if $.Name.Value | root}}
                return provider.{{$.Name.Value | private}}.{{.Name.Value | public}}{{$.Name.Value}}(
                {{- else -}}
                {{$.Name.Value}}Source, _ := params.Source.({{$.Name | nativetype}})
                return {{$.Name.Value}}Source.{{.Name.Value | public}}Field(
                {{- end -}}
                {{- if $.Name.Value | root -}}
                params.Context,
                {{- end -}}
                args)

            },
            {{ end }}{{/* end if connection */}}
        },
        {{ end }} {{/* end if a relay id field */}}
    {{end}}
    {{end}}
})
{{ end }}

{{define "NativeObjectDefinition" -}}
{{ .Name }}Interface
{{- end}}

{{define "GraphqlObjectDefinition" -}}
{{ .Name | private }}Definition
{{- end}}
