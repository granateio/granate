{{ define "Models" }}
{{ $filename := (print output.models "/root.go") }}
{{ if not (existfile $filename) }}
{{ startfile $filename }}
package {{output.models}}
{{ range $i, $root := nodes.Root }}
    var _ {{ nativetypepkg $root.Name output.schema }} = (*Root)(nil)
{{ end }}
{{ if (len nodes.Relay) }}
    var _ {{output.schema}}.RelayInterface = (*Root)(nil)
{{ end }}
type Root struct {

}

{{ range $i, $root := nodes.Root }}
    {{ partial "Model/ObjectDefinition" $root }}
{{ end }}
{{ range $relay := nodes.Relay }}
func (root Root) Resolve{{$relay.Name.Value}}Node(id string) ({{ nativetypepkg $relay.Name output.schema }}, error) {

}
{{ end }}
{{ endfile }}
{{ end }}

{{ range $i, $definition := nodes.Object }}
{{ $filename := (print output.models "/" ($definition.Name.Value | private) ".go") }}
{{ if not (existfile $filename) }}
{{ if not ($definition.Name.Value | root)}}
{{- startfile $filename }}

package {{output.models}}
var _ {{nativetypepkg $definition.Name output.schema }} = (*{{$definition.Name.Value}})(nil)
type {{$definition.Name.Value}} struct {

}

{{ partial "Model/ObjectDefinition" $definition }}

{{ endfile }}
{{ end }}
{{ end }}
{{ end }}

{{ end }}
