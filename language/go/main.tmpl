<!-- Definitions -->
{{define "ObjectDefinition" -}}
{{range $desc := . | desc -}}
// {{.}}
{{end -}}
type {{.Name | def2native}} interface{
    {{range $fields := .Fields -}}
    {{range $desc := . | desc -}}
    // {{.}}
    {{end -}}
    {{.Name.Value | public}}Field(
        {{- range $i, $args := .Arguments -}}
        {{if $i}}, {{end}}{{- .Type | def2native -}}
        {{- end -}}
    ) ({{.Type | def2native}}, error)

    {{end}}
}

var {{ .Name | def2graphql }} = {{cfg.Pkg}}.NewObject({{cfg.Pkg}}.ObjectConfig{
    Name: "{{.Name.Value}}",
    {{with $desc := . | desc -}}
    Description: {{template "Description" $desc}}
    {{end -}}
    {{with $fd := .Fields -}}
    Fields: &{{cfg.Pkg}}.Fields{ 
        {{ range $fd }}
        "{{.Name.Value}}": &{{cfg.Pkg}}.Field{
            Type: {{.Type | def2graphql}},
            {{with $desc := . | desc -}}
            Description: {{template "Description" $desc}}
            {{end -}}
            {{with $args := .Arguments -}}
            Args: &{{cfg.Pkg}}.FieldConfigArgument{
                {{ range $args -}}
                "{{.Name.Value}}": &{{cfg.Pkg}}.ArgumentConfig{
                    Type: {{.Type | def2graphql}},
                    {{with $desc := . | desc -}}
                    Description: {{template "Description" $desc}}
                    {{end -}}
                },
                {{end}}
            },
            {{end -}}
            Resolve: func(params {{cfg.Pkg}}.ResolveParams) (interface{}, error) {
                {{ range $args := .Arguments -}}
                var {{.Name.Value}}Arg {{.Type | def2native}}
                mapstructure.Decode(params.Args["{{.Name.Value}}"], &{{.Name.Value}}Arg)
                {{/*
                {{.Name.Value}}Arg, _ := params.Args["{{.Name.Value}}"].({{.Type | def2native}})
                */}}
                {{end}}
                {{$.Name.Value}}Source, _ := params.Source.({{$.Name | def2native}})
                return {{$.Name.Value}}Source.{{.Name.Value | public}}Field(
                {{- range $i, $args := .Arguments -}}
                {{if $i}}, {{end}}{{.Name.Value}}Arg
                {{- end -}}
                )
            },
        },
        {{end}}
    },
    {{end}}
})

{{end}}

{{define "Description" -}}
    "{{- range $i, $desc := . -}}
    {{if $i}}\n" +
    "{{end}}{{$desc}}
    {{- end -}}",
{{- end}}
{{define "EnumDefinition" -}} {{/* add "Enum" .Name.Value */}}
var {{ .Name | def2graphql}} = {{cfg.Pkg}}.NewEnum({{cfg.Pkg}}.EnumConfig{
    Name: "{{.Name.Value}}",
    Values: {{cfg.Pkg}}.EnumValueConfigMap{
        {{template "EnumValueDefinition" .Values}}
    },
})

{{end}}

{{define "EnumValueDefinition" -}}
{{range $i, $e := . -}}
"{{.Name.Value}}": &{{cfg.Pkg}}.EnumValueConfig{
    Value: {{$i}},
},
{{end}}
{{end}}

{{define "InputObjectDefinition" -}}
type {{ .Name | def2native }} struct{
    {{- range $fields := .Fields}}
    {{range $desc := . | desc -}}
    // {{ $desc }}
    {{end -}}
    {{.Name.Value | public}} {{.Type | def2native}}
    {{end}}
}

var {{ .Name | def2graphql }} = {{cfg.Pkg}}.NewInputObject({{cfg.Pkg}}.InputObjectConfig{
    Name: "{{ .Name.Value }}",
    {{with $desc := . | desc -}}
    Description: {{template "Description" $desc}}
    {{end -}}
    Fields: {{cfg.Pkg}}.InputObjectFieldMap {
        {{range $fields := .Fields}}
        "{{.Name.Value}}":  &{{cfg.Pkg}}.InputObjectFieldConfig{
            Type: {{.Type | def2graphql}},
            {{with $desc := . | desc -}}
            Description: {{template "Description" $desc}}
            {{end -}}
        },
        {{end}}
    },
})
{{end}}

{{define "NativeInputObjectDefinition" -}}
{{ .Name }}Struct
{{- end}}

{{define "GraphqlInputObjectDefinition" -}}
{{ .Name }}Definition
{{- end}}

{{define "OperationDefinition"}}
// query, mutation or subscription
{{end}}

<!-- Types -->

{{define "NativeNamed" -}}
{{ .Name }}
{{- end}}

{{define "NativeList" -}}
[]{{ .Type | def2native}}
{{- end}}

{{define "NativeNonNull" -}}
{{ .Type | def2native}}
{{- end}}

{{define "NativeObjectDefinition" -}}
{{ .Name }}Interface
{{- end}}

{{define "NativeEnumDefinition" -}}
{{/*{{ .Name }}Enum*/}}int
{{- end}}

{{define "NativeScalarDefinition" -}}
{{ .Name }}ScalarInterface
{{- end}}

{{define "GraphqlObjectDefinition" -}}
{{ .Name }}Definition
{{- end}}

{{define "GraphqlEnumDefinition" -}}
{{ .Name }}Enum
{{- end}}

{{define "GraphqlScalarDefinition" -}}
{{ .Name }}Scalar
{{- end}}

{{define "GraphqlNonNull" -}}
{{cfg.Pkg}}.NewNonNull({{.Type | def2graphql}})
{{- end}}

{{define "GraphqlList" -}}
{{cfg.Pkg}}.NewList({{.Type | def2graphql}})
{{- end}}

{{define "GraphqlNamed" -}}
{{cfg.Pkg}}.{{.Name}}
{{- end}}
